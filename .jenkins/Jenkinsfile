/**
  * The Jenkinsfile runs entire build in a golang container and mounts the /var/run/docker.sock file to allow access
  * to the host docker within the container.
  */
node('wcm') {
    docker.image('golang:1.15-buster').inside('-u root -v /var/run/docker.sock:/var/run/docker.sock') {
        environment{
            CGO_ENABLED = 0
            GO111MODULE = on
        }
        stage ('Install Docker Client') {
            sh "apt-get update"
            sh '''
               apt-get install -y \
               apt-transport-https \
               ca-certificates \
               curl \
               gnupg-agent \
               software-properties-common
            '''
            sh "curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -"
            sh '''
               add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/debian \
               $(lsb_release -cs) \
               stable"
            '''
            sh "apt-get update && apt-get install -y docker-ce-cli"
        }
        stage ('Checkout SCM') {
            checkout scm
        }
        stage ('NSM-NSE Integration Tests') {
            suffix="-${env.JOB_NAME}-${currentBuild.number}".toLowerCase().replaceAll("[^a-z0-9]","_")
            sh "echo ${suffix}\n" +
               "export PATH=$PATH:/usr/local/go/bin\n" +
               "export NSMNSE_INTEGRATION_TEST_IMG=integration-img${suffix}\n" +
               "export NSMNSE_INTEGRATION_TEST_NAME=integration-name${suffix}\n" +
               "./test/integration/run.sh\n"
        }
    }
}

